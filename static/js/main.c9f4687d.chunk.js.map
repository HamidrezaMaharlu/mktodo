{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_this","todos","filter","value","observable","action","todoStore","lastId","push","console","log","activeTodoCount","forEach","todo","key","filterKey","reduce","sum","computed","TodoEntry","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","keyCode","state","preventDefault","addTodo","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","props","toggle","onRemove","removeTodo","checked","onClick","TodoItems","toggleAll","length","htmlFor","getFilterdTodos","map","components_TodoItem","removeHandler","TodoFooter","changeFilter","style","display","completedTodoCount","removeAllCompleted","App","components_TodoEntry","components_TodoItems","components_TodoFooter","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9f4687d.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\r\n\r\nexport default class TodoModel {\r\n    id\r\n    @observable title\r\n    @observable completed\r\n    store\r\n\r\n    constructor(store,title,completed,id) {\r\n        this.id = id;\r\n        this.title = title\r\n        this.completed = completed\r\n        this.store = store\r\n    }\r\n\r\n    @action\r\n    toggle() {\r\n        this.completed = !this.completed\r\n    }\r\n\r\n    @action\r\n    removeTodo() {\r\n        this.store.todos = this.store.todos.filter((value) => {\r\n            return (value !== this)\r\n        })\r\n    }\r\n}\r\n","import {observable, action, computed} from 'mobx'\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n    @observable todos = []\r\n    lastId = 0\r\n    @observable filterKey = 0\r\n\r\n    @computed get activeTodoCount() {\r\n        return this.todos.reduce(\r\n            (sum, todo) => sum + (todo.completed ? 0 : 1),\r\n            0\r\n        )\r\n    }\r\n\r\n    @computed get completedTodoCount() {\r\n        return this.todos.reduce(\r\n            (sum, todo) => sum + (todo.completed ? 1 : 0),\r\n            0\r\n        )\r\n    }\r\n\r\n\r\n    @action\r\n    addTodo(title) {\r\n        this.todos.push(new TodoModel(this, title, false, this.lastId++))\r\n        console.log(this.todos)\r\n    }\r\n\r\n    @action\r\n    removeAllCompleted() {\r\n        this.todos = this.todos.filter((value) => {\r\n            return (!value.completed)\r\n        })\r\n    }\r\n\r\n    @action\r\n    toggleAll() {\r\n        if (this.activeTodoCount === 0) this.todos.forEach(todo => todo.completed = false)\r\n        else this.todos.forEach(todo => todo.completed = true)\r\n    }\r\n\r\n    @action\r\n    changeFilter(key) {\r\n        this.filterKey = key;\r\n    }\r\n\r\n\r\n}\r\n\r\nconst todoStore = new TodoStore()\r\n\r\nexport default todoStore\r\n","import React, {Component} from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n\r\n\r\nclass TodoEntry extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            value : ''\r\n        }\r\n    }\r\n\r\n    handleKeyDown = event => {\r\n        if(event.keyCode !== 13) {\r\n            return;\r\n        }\r\n        if(this.state.value === '') {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({value: ''})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <h1>Todo</h1>\r\n                <input\r\n                    value={this.state.value}\r\n                    onChange={event => this.setState({ value: event.target.value})}\r\n                    onKeyDown={event => this.handleKeyDown(event)}\r\n                    type=\"text\"\r\n                    className={\"new-todo\"}\r\n                    placeholder={\"what needs to e done?\"}\r\n                />\r\n\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoEntry\r\n","import React, {Component} from \"react\";\r\nimport { observer } from 'mobx-react'\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n\r\n    onToggle= () => {\r\n        this.props.todo.toggle()\r\n    }\r\n\r\n    onRemove = () => {\r\n        this.props.todo.removeTodo()\r\n    }\r\n\r\n    render() {\r\n        const { todo } = this.props\r\n        return (\r\n            <li className={todo.completed ? 'completed' : ''}>\r\n                <div className={\"view\"}>\r\n                    <input\r\n                        onChange={this.onToggle}\r\n                        type=\"checkbox\"\r\n                        className=\"toggle\"\r\n                        value={todo.completed ? \"off\" : \"on\"}\r\n                        checked={todo.completed}/>\r\n                    <label>{todo.title}</label>\r\n                    <button className=\"destroy\" onClick={this.onRemove}/>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {Component} from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport {observer} from \"mobx-react\"\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    getFilterdTodos() {\r\n        return todoStore.todos.filter(todo => {\r\n            return (todoStore.filterKey === 1) ? !todo.completed : (todoStore.filterKey === 2) ? todo.completed : true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"main\">\r\n                <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\"\r\n                       onChange={() => todoStore.toggleAll()}\r\n                       checked={todoStore.activeTodoCount === 0 && todoStore.todos.length}/><label htmlFor=\"toggle-all\" ></label>\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        this.getFilterdTodos().map(todo => {\r\n                            return (\r\n                                <TodoItem key={todo.id} todo={todo} removeHandler={this.onRemove}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItems\r\n","import React, {Component} from \"react\";\r\nimport {observer} from \"mobx-react\"\r\n\r\n@observer\r\nclass TodoFooter extends Component {\r\n\r\n    render() {\r\n        const todoStore = this.props.todoStore\r\n\r\n        if (todoStore.todos.length === 0) return null;\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"todo-count\">\r\n                    {todoStore.activeTodoCount} item left\r\n                </span>\r\n                <ul className=\"filters\">\r\n                    <li><a\r\n                        onClick={() => this.props.todoStore.changeFilter(0)}\r\n                        className={todoStore.filterKey == 0 ? \"selected\" : \"\"}>All</a></li>\r\n                    <li><a\r\n                        onClick={() => this.props.todoStore.changeFilter(1)}\r\n                        className={todoStore.filterKey == 1 ? \"selected\" : \"\"}>Active</a></li>\r\n                    <li><a\r\n                        onClick={() => this.props.todoStore.changeFilter(2)}\r\n                        className={todoStore.filterKey == 2 ? \"selected\" : \"\"}>Completed</a></li>\r\n                </ul>\r\n                <button className=\"clear-completed\"\r\n                        style={{display: todoStore.completedTodoCount ? '' : 'none'}}\r\n                        onClick={() => {\r\n                            todoStore.removeAllCompleted()\r\n                        }}>\r\n                    Clear completed\r\n                </button>\r\n            </footer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoFooter\r\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\nimport todoStore from \"./stores/TodoStore\";\n\n@observer\nclass App extends Component {\n    render() {\n        return [\n            <div id=\"todoapp\" className=\"todoapp\">\n                <TodoEntry/>\n                <TodoItems/>\n                <TodoFooter todoStore = {todoStore}/>\n            </div>,\n            <footer className=\"info\">\n                <p>Written by <a href=\"https://github.com/alitalebi7s\">Ali Talebi</a></p>\n                <p>Project of <a href=\"https://maktabkhooneh.org\">Maktabkhooneh</a></p>\n            </footer>\n        ]\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}